import '../lib/domain/entities/checkpoint/checkpoint_data.dart';
import '../lib/domain/entities/checkpoint/checkpoint_values/business_partners_values.dart';

/// Exemplo demonstrando o uso de m√∫ltiplos s√≥cios empresariais.
void main() {
  print('üöÄ Demonstra√ß√£o: M√∫ltiplos S√≥cios Empresariais\n');

  // Inicializar checkpoint vazio
  var checkpoint = CheckpointData.empty();
  print(
    'üìã Checkpoint iniciado: ${checkpoint.businessPartnersValues.length} s√≥cios',
  );

  // Adicionar primeiro s√≥cio
  final socio1 = BusinessPartnerData(
    companyId: 'EMP001',
    fullName: 'Jo√£o Silva',
    email: 'joao.silva@empresa.com',
    isPoliticallyExposed: false,
    zipCode: '01234-567',
    state: 'SP',
    city: 'S√£o Paulo',
    district: 'Centro',
    street: 'Rua das Flores',
    number: '123',
    complement: 'Sala 45',
  );

  checkpoint = checkpoint.addBusinessPartner(socio1);
  print(
    '‚úÖ Primeiro s√≥cio adicionado: ${checkpoint.businessPartnersValues.length} s√≥cios',
  );

  // Adicionar segundo s√≥cio
  final socio2 = BusinessPartnerData(
    companyId: 'EMP002',
    fullName: 'Maria Santos',
    email: 'maria.santos@empresa.com',
    isPoliticallyExposed: true,
    zipCode: '04567-890',
    state: 'RJ',
    city: 'Rio de Janeiro',
    district: 'Copacabana',
    street: 'Av. Atl√¢ntica',
    number: '1000',
  );

  checkpoint = checkpoint.addBusinessPartner(socio2);
  print(
    '‚úÖ Segundo s√≥cio adicionado: ${checkpoint.businessPartnersValues.length} s√≥cios',
  );

  // Adicionar terceiro s√≥cio
  final socio3 = BusinessPartnerData(
    fullName: 'Carlos Oliveira',
    email: 'carlos.oliveira@empresa.com',
    isPoliticallyExposed: false,
  );

  checkpoint = checkpoint.addBusinessPartner(socio3);
  print(
    '‚úÖ Terceiro s√≥cio adicionado: ${checkpoint.businessPartnersValues.length} s√≥cios',
  );

  // Listar todos os s√≥cios
  print('\nüìã Lista de S√≥cios:');
  final socios = checkpoint.businessPartnersValues;
  for (int i = 0; i < socios.length; i++) {
    final socio = socios[i];
    print('${i + 1}. ${socio.fullName} (${socio.email})');
    print('   PEP: ${socio.isPoliticallyExposed ?? false ? "Sim" : "N√£o"}');
    if (socio.city != null) {
      print('   Local: ${socio.city}, ${socio.state}');
    }
    print('');
  }

  // Atualizar dados do primeiro s√≥cio
  checkpoint = checkpoint.updateBusinessPartnerFields(
    0,
    email: 'joao.silva.novo@empresa.com',
    city: 'Campinas',
  );
  print('üîÑ Dados do primeiro s√≥cio atualizados');

  // Verificar altera√ß√£o
  final socioAtualizado = checkpoint.businessPartnersValues[0];
  print('   Novo email: ${socioAtualizado.email}');
  print('   Nova cidade: ${socioAtualizado.city}');

  // Remover o segundo s√≥cio (√≠ndice 1)
  checkpoint = checkpoint.removeBusinessPartner(1);
  print(
    '\n‚ùå Segundo s√≥cio removido: ${checkpoint.businessPartnersValues.length} s√≥cios restantes',
  );

  // Lista final
  print('\nüìã Lista Final de S√≥cios:');
  final sociosFinais = checkpoint.businessPartnersValues;
  for (int i = 0; i < sociosFinais.length; i++) {
    final socio = sociosFinais[i];
    print('${i + 1}. ${socio.fullName} (${socio.email})');
  }

  // Testar serializa√ß√£o
  final json = checkpoint.toJson();
  final checkpointFromJson = CheckpointData.fromJson(json);
  final sociosDeserializados = checkpointFromJson.businessPartnersValues;

  print('\nüîÑ Teste de Serializa√ß√£o:');
  print('S√≥cios antes: ${sociosFinais.length}');
  print('S√≥cios depois: ${sociosDeserializados.length}');
  print(
    'Serializa√ß√£o funcionou: ${sociosFinais.length == sociosDeserializados.length}',
  );

  print('\n‚úÖ Demonstra√ß√£o conclu√≠da com sucesso!');
}
